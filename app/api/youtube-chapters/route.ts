import { NextRequest, NextResponse } from 'next/server';

function extractInitialData(html: string) {
    const start = html.indexOf('var ytInitialData = ');
    if (start === -1) return null;
    const end = html.indexOf('</script>', start);
    const jsonStr = html.slice(start + 20, end).trim().replace(/;$/, '');
    try {
        return JSON.parse(jsonStr);
    } catch (err) {
        console.error('JSON parse error:', err);
        return null;
    }
}

function extractChapters(data: any, baseUrl = 'https://youtube.com') {
    try {
        const contents =
            data?.engagementPanels?.[2]?.engagementPanelSectionListRenderer?.content
                ?.macroMarkersListRenderer?.contents;

        if (!contents || !Array.isArray(contents)) return [];

        const areAutoGenerated = 'macroMarkersInfoItemRenderer' in contents[0];
        const filtered = contents.slice(areAutoGenerated ? 1 : 0);

        return filtered.map((item: any) => {
            const c = item.macroMarkersListItemRenderer;
            return {
                title: c.title.simpleText,
                time: c.timeDescription.simpleText,
                url: baseUrl + c.onTap.commandMetadata.webCommandMetadata.url,
            };
        });
    } catch (err) {
        console.error('extractChapters error:', err);
        return [];
    }
}

export async function POST(request: NextRequest) {
    try {
        const { videoId } = await request.json();

        if (!videoId) {
            return NextResponse.json({ error: 'Video ID is required' }, { status: 400 });
        }

        const url = `https://www.youtube.com/watch?v=${videoId}`;
        const res = await fetch(url);

        if (!res.ok) {
            throw new Error('Failed to fetch YouTube page');
        }

        const html = await res.text();
        const data = extractInitialData(html);

        if (!data) {
            throw new Error('Could not extract ytInitialData');
        }

        const chapters = extractChapters(data);

        return NextResponse.json({ chapters });
    } catch (error) {
        console.error('Error:', error);
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'Internal server error' },
            { status: 500 }
        );
    }
}